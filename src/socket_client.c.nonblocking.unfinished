/*
 * socket_client.c
 *
 *  Created on: Sep 22, 2012
 *      Author: caoj7
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/fcntl.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <event2/event.h>
#include <event2/bufferevent.h>

#include "config.h"
#include "socket_client.h"

#define SIZE 8192
#define LISTEN_BACKLOG 	32


static void read_cb(struct bufferevent *bev, void *arg);
static void error_cb(struct bufferevent *bev, short event, void *arg);
static void do_accept_cb(evutil_socket_t sockfd, short event_type, void *arg);

static void read_cb(struct bufferevent *bev, void *arg)
{
    char rec_buf[SIZE], send_buf[SIZE];
    evutil_socket_t fd;

    if(fd = bufferevent_getfd(bev), fd < 0){
    	perror("ERROR: bufferevent_getfd");
    	exit(1);
    }

    if(bufferevent_read(bev, rec_buf, SIZE) > 0) {
    	puts("========================");
    	printf("AA: received from client: %s\n", rec_buf);
        get_info_allocate(rec_buf, send_buf, fd);
        bufferevent_write(bev, send_buf, strlen(send_buf)+1);
        printf("BB: send to client: %s\n", send_buf);
    }
}

void write_cb(struct bufferevent *bev, void *arg) {
	char send_buf[SIZE], rec_buf[SIZE];
	evutil_socket_t fd;

	if(fd = bufferevent_getfd(bev), fd < 0){
		perror("ERROR: bufferevent_getfd");
		exit(1);
	}

	if(bufferevent_write(bev, send_buf, strlen(send_buf)+1) > 0){
		printf("AA: send to server: %s\n", send_buf);
		get_info_allocate(rec_buf, send_buf, fd);
		bufferevent_read(bev, rec_buf, SIZE);
		printf("BB: recv form server: %s\n", rec_buf);

	}
}

//void write_cb(struct bufferevent *bev, void *arg) {}

static void error_cb(struct bufferevent *bev, short event, void *arg)
{
    evutil_socket_t fd = bufferevent_getfd(bev);
    printf("fd = %u, ", fd);
    if (event & BEV_EVENT_TIMEOUT) {
        printf("Timed out\n"); //if bufferevent_set_timeouts() called
    }else if (event & BEV_EVENT_EOF) {
        printf("connection closed\n");
    }else if (event & BEV_EVENT_ERROR) {
        printf("some other error\n");
    }
    bufferevent_free(bev);
}

static void do_accept_cb(evutil_socket_t sockfd, short event_type, void *arg)
{
    evutil_socket_t fd;
    struct sockaddr_in sin;
    socklen_t slen;

    struct event_base *base;
	struct bufferevent *bev;

    if(fd = accept(sockfd, (struct sockaddr *)&sin, &slen), fd < 0){
    	perror("ERROR: accept");
    	exit(-1);
    }

    base = (struct event_base *)arg;
    bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);
    bufferevent_setcb(bev, read_cb, NULL, error_cb, arg);
    bufferevent_enable(bev, EV_READ|EV_WRITE|EV_PERSIST);
}


int operation(char *cmd_str)
{
	char rt_str[SIZE];
	int socket_fd;

	char IP[16];
	uint32_t PORT;
	get_IP_PORT(IP, &PORT);

	if(socket_fd = socket(AF_INET, SOCK_STREAM, 0), socket_fd < 0){
		perror("ERROR: socket");
		return -1;
	}

	//	 flags = fcntl(socket_fd, F_GETFL, 0);
	//	 fcntl(socket_fd, F_SETFL, flags | O_NONBLOCK);

	struct sockaddr_in address;
	bzero(&address, sizeof(address));
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = inet_addr(IP);
	address.sin_port =  htons(PORT);

	if(connect(socket_fd, (struct sockaddr*)&address, sizeof(address)) < 0){
		perror("ERROR: connect");
		return -1;
	}

	//send the cmd
	if(send(socket_fd, cmd_str, strlen(cmd_str) + 1, 0) < 0){
		perror("ERROR: send");
		return -1;
	}

	//recv
	if(recv(socket_fd, rt_str, SIZE, 0) < 0){
		perror("ERROR: recv");
		return -1;
	}

	puts(rt_str);

	close(socket_fd);
	return 0;
}
